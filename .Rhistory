pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
ntree_values = c(50, 75, 100, 125, 150, 200)
correlation_values = c()
# loop through the values
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
plot(correlation_values, type="o", col="blue", xlab="ntree", ylab="correlation")
colnames(correlation_values) <- ntree_values
plot(correlation_values, type="o", col="blue", xlab="ntree_values", ylab="correlation")
# plot the ntree_values on the x axis and the correlation_values on the y axis
plot(ntree_values, correlation_values, type="l", xlab="ntree", ylab="correlation")
print(correlation_values[2])
pptree<-ctree(wage_eur ~ ., data=data.train, control = ctree_control(mincriterion=0.99999, minsplit=0, minbucket=100))
plot(ptree)
dim(data.train)
rtree<-rpart(wage_eur ~ ., data=data.train, cp=0.005)
# it looks like it stabilazes around 8 splits, so I prune at that cp value
pruned_tree <- prune(rtree, cp = 0.0117)
rtree<-rpart(wage_eur ~ ., data=data.train, cp=0.005)
rpart.plot(rtree)
cprint(rtree)
dim(data.train)
rtree<-rpart(wage_eur ~ ., data=data.train, cp=0.005)
cprint(rtree)
cpprint(rtree)
printcp(rtree)
# it looks like it stabilazes around 8 splits, so I prune at that cp value
pruned_tree <- prune(rtree, cp = 0.0117)
rpart.plot(pruned_tree)
# training
rf = randomForest(wage_eur ~ ., data=data.train, ntree=50, mtry=3, importance=TRUE)
varImpPlot(rf)
# validation on the training set
pred <- predict(rf,data.train[,-1])
plot(data.train[,1],pred)
cor(data.train[,1],pred)
pred <- predict(rf,data.test[,-1])
plot(data.test[,1],pred)
cor(data.test[,1],pred)
# training
rf = randomForest(wage_eur ~ ., data=data.train, ntree=50, mtry=3, importance=TRUE)
varImpPlot(rf)
# validation on the training set
pred <- predict(rf,data.train[,-1])
plot(data.train[,1],pred)
cor(data.train[,1],pred)
pred <- predict(rf,data.test[,-1])
plot(data.test[,1],pred)
cor(data.test[,1],pred)
rf = randomForest(wage_eur ~ ., data=data.train, ntree=50, mtry=3, importance=TRUE)
varImpPlot(rf)
pred <- predict(rf,data.train[,-1])
plot(data.train[,1],pred)
cor(data.train[,1],pred)
# check performance on the test data
pred <- predict(rf,data.test[,-1])
plot(data.test[,1],pred)
cor(data.test[,1],pred)
prediction <- predict(rf,data.test[,-1])
plot(data.test[,1],prediction)
cor(data.test[,1],prediction)
ntree_values = c(50, 75, 100, 125, 150, 200)
correlation_values = c()
# loop through the values
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
correlation_values = c()
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
ntree_values = c(50, 75, 100, 125, 150, 200)
correlation_values = c()
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
dataset <- read.csv('data/players_22.csv')
head(dataset)
str(dataset) #checking the structure
summary(dataset)
# CLEANING DATA
# dropping the unnecessary columns
library(dplyr)
library(tidyr)
library(caret)
library(lubridate)
library(FactoMineR)
colnames(dataset) <- trimws(colnames(dataset)) #deleting the white spaces
typeof(colnames(dataset)) #checking the type character
print(colnames(dataset), quote = TRUE)
#finding the columns that contain the 'player_url'
grep('player_url', colnames(dataset), value = TRUE)
#dropping the urls
dataset <- dataset %>% select(-"player_url")
dataset <- dataset %>% select(-c("long_name", "player_face_url",
"club_logo_url","club_flag_url",
"nation_logo_url", "nation_flag_url"
))
dim(dataset) #checking the dimension
sapply(dataset, class) #listing types for each attribute
#checking missing values
colSums(is.na(dataset))
dataset <- dataset %>% select(-c("nation_team_id", "nation_jersey_number",
"goalkeeping_speed")) #high num of missing values
#imputation with median as they are continuous numerical
#median as it is less affected by outliers if the data is skewed
dataset$value_eur[is.na(dataset$value_eur)] <- median(dataset$value_eur, na.rm = TRUE)
dataset$wage_eur[is.na(dataset$wage_eur)] <- median(dataset$wage_eur, na.rm = TRUE)
dataset <- dataset %>% mutate(across(c("release_clause_eur", "pace", "shooting", "passing",
"dribbling", "defending", "physic"), ~replace_na(., 0)))
colSums(is.na(dataset))
library(VIM)
#kNN for categorical/numeric ID
dataset <- kNN(dataset, variable = "club_team_id", k = 5)
dataset <- dataset %>% select(-ends_with("_imp"))
#mode for league level - ordinal variable: numeric but with a meaningful order
mode <- function(x, na.rm = TRUE) {
if (na.rm) x <- x[!is.na(x)]
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
dataset$league_level[is.na(dataset$league_level)] <- mode(dataset$league_level, na.rm = TRUE)
#mode for numerical club_jersey_number
#they are consistent within a club: players in the same club have similar numbers
#most frequent number per club: mode
dataset$club_jersey_number[is.na(dataset$club_jersey_number)] <- mode(dataset$club_jersey_number, na.rm = TRUE)
#club_contract_valid_until is the year until the contract is valid
#numeric variable representing a year, use median
dataset$club_contract_valid_until[is.na(dataset$club_contract_valid_until)] <- median(dataset$club_contract_valid_until, na.rm = TRUE)
# CONVERTING CATEGORICAL VARIABLES TO FACTORS
#character variables to factors
dataset <- dataset %>%
mutate(across(c(short_name, player_positions, club_name, league_name, club_position,
club_loaned_from, club_joined, nationality_name, nation_position,
preferred_foot, work_rate, body_type, real_face, player_tags,
player_traits, ls, st, rs, lw, lf, cf, rf, rw, lam, cam, ram,
lm, lcm, cm, rcm, rm, lwb, ldm, cdm, rdm, rwb, lb, lcb, cb, rcb, rb),
as.factor))
#numeric categorical to factors
dataset <- dataset %>%
mutate(across(c(club_team_id, league_level,club_jersey_number, nationality_id, weak_foot, skill_moves, international_reputation), as.factor ))
str(dataset)
#converting dob to data type
dataset$dob <- as.Date(dataset$dob, format = "%Y-%m-%d")
#checking for multicollinearity
cor_matrix <- cor(dataset[, sapply(dataset, is.numeric)], use = "pairwise.complete.obs")
round(cor_matrix, 2)
library(ggcorrplot)
ggcorrplot(cor_matrix, method = "square", type = "lower", lab = TRUE)
#basing on the multicollinearity matrix, retain only those features that have a good correlation coefficint with target variable
target_correlation <- cor_matrix['value_eur', ]
#filtering variables with correlation coefficient >= 0.5
high_corr_vars <- names(target_correlation[abs(target_correlation) >= 0.5])
#high_corr_variables show that "overall","potential",wage_eur","release_clause_eur"
#have high correlation coefficients with target variable (>0.5)
#this is too little, so i decide to include more
# FEATURE ENGINEERING
dataset <- dataset %>% mutate(experience_attr = age * overall, #quantifying the relationship between age and overall rating to indicate how experienced the footballer is
market_value_per_overall_perform = value_eur / overall,
market_value_to_wage = value_eur / wage_eur)
#one-hot (making them binary) encoding for categorical variables
dataset$preferred_foot
dataset <- dataset %>%
mutate(preferred_foot_left = ifelse(preferred_foot == "Left", 1, 0),
preferred_foot_right = ifelse(preferred_foot == "Right", 1, 0))
#separating work_rate into attack and defense
library(stringr)
dataset <- dataset %>%
separate(work_rate, into = c("work_rate_attack", "work_rate_defense"),
sep = "/", remove = FALSE) %>%
mutate(work_rate_attack = case_when(
work_rate_attack == "High" ~ 2,
work_rate_attack == "Medium" ~ 1,
TRUE ~ 0 #assuming 'low' as 0
),
work_rate_defense = case_when(
work_rate_defense == "High" ~ 2,
work_rate_defense == "Medium" ~ 1,
TRUE ~ 0
)
)
#one-hot encoding for league_name, only keeping the top leagues
top_leagues <- dataset %>%
count(league_name, sort = TRUE) %>%
top_n(10, n) %>%
pull(league_name)
dataset <- dataset %>%
mutate(league_top = ifelse(league_name %in% top_leagues, as.character(league_name), "Other")) %>%
mutate(league_top = as.factor(league_top))
str(dataset)
#dropping the unuseful columns
dataset <- dataset %>% select(-c("preferred_foot", "work_rate",
"league_name"
))
# reducing dimensionality with PCA on skill-related features:
skill_features <- c(
"shooting", "passing", "dribbling", "defending", "physic",
"attacking_crossing", "attacking_finishing", "attacking_heading_accuracy",
"attacking_short_passing", "attacking_volleys", "skill_dribbling", "skill_curve",
"skill_fk_accuracy", "skill_long_passing", "skill_ball_control",
"movement_acceleration", "movement_sprint_speed", "movement_agility",
"movement_reactions", "movement_balance", "power_shot_power", "power_jumping",
"power_stamina", "power_strength", "power_long_shots", "mentality_aggression",
"mentality_interceptions", "mentality_positioning", "mentality_vision",
"mentality_penalties", "mentality_composure", "defending_marking_awareness",
"defending_standing_tackle", "defending_sliding_tackle"
)
#checking for multicollinearity
cor_matrix2 <- cor(dataset[, skill_features], use = "complete.obs")
ggcorrplot(cor_matrix2, method = "square", type = "lower", lab = TRUE)
#features have high correlations >0,7, so the PCA is ok
#pca is sensitive to scale, so the standartisation (normalizing the data) is necessary
dataset_scaled_skill <- scale(dataset[, skill_features])
#performing PCA
pca_skills <- prcomp(dataset_scaled_skill, center = TRUE, scale. = TRUE)
plot(pca_skills, type = 'l')
summary(pca_skills) #basing on the variance expalined, PC1 to PC10 should be kept (explaining ~93%)
dataset <- cbind(dataset, as.data.frame(pca_skills$x[, 1:10])) #combining pca with the dataset
#let's get the factor loadings from the rotated matrix
loadings <- pca_skills$rotation
loadings
#library(factoextra)
#fviz_pca_biplot(pca_skills,
#                repel = TRUE,
#                col.var = 'green',
#                col.ind = 'yellow')
#creating interacton features and polynomials
#these features can have more direct impact on the value as compared to pca
dataset<- dataset %>%
mutate(
pace_dribbling = pace * dribbling,
defending_physic = defending * physic
)
# deleting unneccessary columns again
#sofifa_id: doesnt help to predict the player's value - introduces noise;
#short_name: the same as sofifa_id and also is text-based variable
# other variables im dropping because they are categorical
dataset <- dataset %>% select(-c(sofifa_id, short_name))
dataset <- dataset %>% select(-c(club_name, nationality_name, player_positions))
new_fifa <- dataset %>%
select(-c(shooting, passing,
attacking_crossing, attacking_finishing, attacking_heading_accuracy,
attacking_short_passing, attacking_volleys, skill_dribbling, skill_curve,
skill_fk_accuracy, skill_long_passing, skill_ball_control,
movement_acceleration, movement_sprint_speed, movement_agility,
movement_reactions, movement_balance, power_shot_power, power_jumping,
power_stamina, power_strength, power_long_shots, mentality_aggression,
mentality_interceptions, mentality_positioning, mentality_vision,
mentality_penalties, mentality_composure, defending_marking_awareness,
defending_standing_tackle, defending_sliding_tackle))
summary(new_fifa)
str(new_fifa)
#in the end i choose to include the following variables:
# "overall","potential",wage_eur","age", "release_clause_eur", market_value_per_overall_perform, experience_attr,
# market_value_to_wage, preferred_foot_right, preferred_foot_left, work_rate_attack, work_rate_defense,
# PC1 - PC10, pace_dribbling, defending_physic, height, weight, contract_valid_until, average ability
#OUTLIERS AND EDA FOR SELECTED VARIABLES
# target variable - value_eur -> log_value_eur_capped
ggplot(new_fifa, aes(y = value_eur)) + geom_boxplot() +
labs(title = 'boxplot of value_eur', y = 'value in eur') #many outliers
ggplot(new_fifa, aes(x = value_eur)) +
geom_histogram(binwidth = 1000000, fill = "blue", color = "black") +
labs(title = "histogram of value_eur",
x = "value in eur", y = "frequency") #data is right-skewed
#log transformation - changes measurement
new_fifa$log_value_eur <- log(new_fifa$value_eur + 1)
ggplot(new_fifa, aes(x = log_value_eur)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_value_eur', x = 'log(value_eur)', y = 'frequency')
ggplot(new_fifa, aes(y = log_value_eur)) + geom_boxplot() +
labs(title = 'boxplot of log_value_eur', y = 'log(value in eur)')
#capping outliers
upper_bound <- quantile(new_fifa$log_value_eur, 0.99)
lower_bound <- quantile(new_fifa$log_value_eur, 0.01)
new_fifa$log_value_eur_capped <- new_fifa$log_value_eur
new_fifa$log_value_eur_capped[new_fifa$log_value_eur > upper_bound] <- upper_bound
new_fifa$log_value_eur_capped[new_fifa$log_value_eur < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = log_value_eur_capped)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
labs(title = 'histogram of capped log_value', x = 'capped log_value', y = ' frequency')
ggplot(new_fifa, aes(y = log_value_eur_capped)) + geom_boxplot() +
labs(title = 'boxplot of log_value_eur_capped', y = 'log(value in eur)')
# INDEPENDENT VARIABLES:
#1. overall
ggplot(new_fifa, aes(y = overall)) + geom_boxplot() +
labs(title = "boxplot of current overall rating", y = "overall rating")
ggplot(new_fifa, aes(x = overall)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of current overall", x = "overall rating", y = "frequency")
#overall has a small range of values, so log transformation is no effective
upper_bound <- quantile(new_fifa$overall, 0.99)
lower_bound <- quantile(new_fifa$overall, 0.01)
new_fifa$overall_capped <- new_fifa$overall
new_fifa$overall_capped[new_fifa$overall > upper_bound] <- upper_bound
new_fifa$overall_capped[new_fifa$overall < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = overall_capped)) +
geom_histogram(binwidth = 1, fill = 'blue', color = 'black') +
labs(title = 'histogram of capped overall rating', x = 'capped overall rating', y = 'frequency')
ggplot(new_fifa, aes(y = overall_capped)) + geom_boxplot() +
labs(title = "boxplot of capped current overall rating", y = "capped overall rating")
#2. potential
ggplot(new_fifa, aes(y = potential)) + geom_boxplot() +
labs(title = "boxplot of potential", y = "potential")
ggplot(new_fifa, aes(x = potential)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of overall potential", x = "overall potential", y = "frequency")
upper_bound <- quantile(new_fifa$potential, 0.99)
lower_bound <- quantile(new_fifa$potential, 0.01)
new_fifa$potential_capped <- new_fifa$potential
new_fifa$potential_capped[new_fifa$potential > upper_bound] <- upper_bound
new_fifa$potential_capped[new_fifa$potential < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = potential_capped)) +
geom_histogram(binwidth = 1, fill = 'blue', color = 'black') +
labs(title = 'histogram of capped potential', x = 'capped potential', y = 'frequency')
ggplot(new_fifa, aes(y = potential_capped)) + geom_boxplot() +
labs(title = "boxplot of capped potential", y = "age")
#3. wage_eur
ggplot(new_fifa, aes(y = wage_eur)) + geom_boxplot() +
labs(title = "boxplot of wage_eur", y = "wage_eur")
ggplot(new_fifa, aes(x = wage_eur)) + geom_histogram(binwidth = 10000, fill = "blue", color = "black") +
labs(title = "histogram of wage_eur", x = "wage_eur", y = "frequency")
# robust scaling
new_fifa$wage_robust <- (new_fifa$wage_eur - median(new_fifa$wage_eur)) / IQR(new_fifa$wage_eur)
ggplot(new_fifa, aes(x = wage_robust)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'Histogram of Robust-Scaled Wage', x = 'Robust-Scaled Wage', y = 'Frequency')
#not great
# rank transformation
new_fifa$wage_rank <- rank(new_fifa$wage_eur)
ggplot(new_fifa, aes(x = wage_rank)) +
geom_histogram(binwidth = 100, fill = 'blue', color = 'black') +
labs(title = 'histogram of rank-transformed wage', x = 'rank(wage)', y = 'frequency')
ggplot(new_fifa, aes(y = wage_rank)) + geom_boxplot() +
labs(title = "boxplot of wage_rank", y = "wage_rank")
#4. age
ggplot(new_fifa, aes(y = age)) + geom_boxplot() +
labs(title = "boxplot of age", y = "age")
ggplot(new_fifa, aes(x = age)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of age", x = "age", y = "frequency")
#square root transformation
new_fifa$sqrt_age <- sqrt(new_fifa$age)
ggplot(new_fifa, aes(x = sqrt_age)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'histogram of sqrt_age', x = 'sqrt_age', y = 'frequency')
ggplot(new_fifa, aes(y = sqrt_age)) + geom_boxplot() +
labs(title = "boxplot of sqrt_age", y = "sqrt_age")
#5. height_cm
ggplot(new_fifa, aes(y = height_cm)) + geom_boxplot() +
labs(title = "boxplot of height", y = "height")
ggplot(new_fifa, aes(x = height_cm)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of height", x = "height", y = "frequency")
upper_bound <- quantile(new_fifa$height_cm, 0.99)
lower_bound <- quantile(new_fifa$height_cm, 0.01)
new_fifa$height_cm_capped <- new_fifa$height_cm
new_fifa$height_cm_capped[new_fifa$height_cm > upper_bound] <- upper_bound
new_fifa$height_cm_capped[new_fifa$height_cm < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = height_cm_capped)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
labs(title = 'histogram of capped wage', x = 'capped wage', y = ' frequency')
#stll skewed
ggplot(new_fifa, aes(y = height_cm_capped)) + geom_boxplot() +
labs(title = "boxplot of height_cm_capped", y = "height_cm_capped")
#6. weight_kg
ggplot(new_fifa, aes(y = weight_kg)) + geom_boxplot() +
labs(title = "boxplot of weight_kg", y = "weight_kg")
ggplot(new_fifa, aes(x = weight_kg)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of weight_kg", x = "weight_kg", y = "frequency")
upper_bound <- quantile(new_fifa$weight_kg, 0.99)
lower_bound <- quantile(new_fifa$weight_kg, 0.01)
new_fifa$weight_kg_capped <- new_fifa$weight_kg
new_fifa$weight_kg_capped[new_fifa$weight_kg > upper_bound] <- upper_bound
new_fifa$weight_kg_capped[new_fifa$weight_kg < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = weight_kg_capped)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
labs(title = 'histogram of weight_kg_capped', x = 'weight_kg_capped', y = ' frequency')
#stll skewed
ggplot(new_fifa, aes(y = weight_kg_capped)) + geom_boxplot() +
labs(title = "boxplot of weight_kg_capped", y = "weight_kg_capped")
#7. club_contract_valid_until
ggplot(new_fifa, aes(y = club_contract_valid_until)) + geom_boxplot() +
labs(title = "club_contract_valid_until", y = "year")
ggplot(new_fifa, aes(x = club_contract_valid_until)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of club_contract_valid_until", x = "year", y = "frequency")
#8. experience_attr
ggplot(new_fifa, aes(y = experience_attr)) + geom_boxplot() +
labs(title = "experience_attr", y = "experience_attr")
ggplot(new_fifa, aes(x = experience_attr)) + geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "histogram of experience_attr", x = "experience_attr", y = "frequency")
#log transformation - changes measurement
new_fifa$log_experience_attr <- log(new_fifa$experience_attr + 1)
ggplot(new_fifa, aes(x = log_experience_attr)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_experience_attr', x = 'log_experience_attr', y = 'frequency')
ggplot(new_fifa, aes(y = log_experience_attr)) + geom_boxplot() +
labs(title = "log_experience_attr", y = "log_experience_attr")
#9. market_value_per_overall_perform:
ggplot(new_fifa, aes(y = market_value_per_overall_perform)) + geom_boxplot() +
labs(title = "market_value_per_overall_perform", y = "market_value_per_overall_perform")
ggplot(new_fifa, aes(x = market_value_per_overall_perform)) + geom_histogram(binwidth = 1000, fill = "blue", color = "black") +
labs(title = "histogram of market_value_per_overall_perform", x = "market_value_per_overall_perform", y = "frequency")
#log transformation - changes measurement
new_fifa$log_market_value_per_overall_perform <- log(new_fifa$market_value_per_overall_perform + 1)
ggplot(new_fifa, aes(x = log_market_value_per_overall_perform)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_market_value_per_overall_perform', x = 'log_market_value_per_overall_perform', y = 'frequency')
ggplot(new_fifa, aes(y = log_market_value_per_overall_perform)) + geom_boxplot() +
labs(title = "log_market_value_per_overall_perform", y = "log_market_value_per_overall_perform")
#capping
upper_bound <- quantile(new_fifa$log_market_value_per_overall_perform, 0.995)
lower_bound <- quantile(new_fifa$log_market_value_per_overall_perform, 0.005)
new_fifa$log_market_value_per_overall_perform_capped <- new_fifa$log_market_value_per_overall_perform
new_fifa$log_market_value_per_overall_perform_capped[new_fifa$log_market_value_per_overall_perform > upper_bound] <- upper_bound
new_fifa$log_market_value_per_overall_perform_capped[new_fifa$log_market_value_per_overall_perform < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = log_market_value_per_overall_perform_capped)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_market_value_per_overall_perform_capped', x = 'log_market_value_per_overall_perform_capped', y = ' frequency')
ggplot(new_fifa, aes(y = log_market_value_per_overall_perform_capped)) + geom_boxplot() +
labs(title = "log_market_value_per_overall_perform_capped", y = "log_market_value_per_overall_perform_capped")
# tukey's fences method for capping outliers
Q1 <- quantile(new_fifa$log_market_value_per_overall_perform, 0.25)
Q3 <- quantile(new_fifa$log_market_value_per_overall_perform, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
#capping
new_fifa$log_market_value_per_overall_perform_capped <- pmin(pmax(new_fifa$log_market_value_per_overall_perform, lower_bound), upper_bound)
ggplot(new_fifa, aes(y = log_market_value_per_overall_perform_capped)) + geom_boxplot() +
labs(title = "log_market_value_per_overall_perform_capped", y = "log_market_value_per_overall_perform_capped")
#10. market_value_to_wage
ggplot(new_fifa, aes(y = market_value_to_wage)) + geom_boxplot() +
labs(title = "market_value_to_wage", y = "market_value_to_wage")
ggplot(new_fifa, aes(x = market_value_to_wage)) + geom_histogram(binwidth = 1000, fill = "blue", color = "black") +
labs(title = "histogram of market_value_to_wage", x = "market_value_to_wage", y = "frequency")
#log transformation - changes measurement
new_fifa$log_market_value_to_wage <- log(new_fifa$market_value_to_wage + 1)
ggplot(new_fifa, aes(x = log_market_value_to_wage)) +
geom_histogram(binwidth = 0.1, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_market_value_to_wage', x = 'log_market_value_to_wage', y = 'frequency')
ggplot(new_fifa, aes(y = log_market_value_to_wage)) + geom_boxplot() +
labs(title = "log_market_value_to_wage", y = "log_market_value_to_wage")
#capping
upper_bound <- quantile(new_fifa$log_market_value_to_wage, 0.995)
lower_bound <- quantile(new_fifa$log_market_value_to_wage, 0.005)
new_fifa$log_market_value_to_wage_capped <- new_fifa$log_market_value_to_wage
new_fifa$log_market_value_to_wage_capped[new_fifa$log_market_value_to_wage > upper_bound] <- upper_bound
new_fifa$log_market_value_to_wage_capped[new_fifa$log_market_value_to_wage < lower_bound] <- lower_bound
ggplot(new_fifa, aes(x = log_market_value_to_wage_capped)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
labs(title = 'histogram of log_market_value_to_wage_capped', x = 'log_market_value_to_wahe_capped', y = ' frequency')
ggplot(new_fifa, aes(y = log_market_value_to_wage_capped)) + geom_boxplot() +
labs(title = "log_market_value_to_wage_capped", y = "log_market_value_to_wahe_capped")
#turkey fences
Q1 <- quantile(new_fifa$log_market_value_to_wage, 0.25)
Q3 <- quantile(new_fifa$log_market_value_to_wage, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
#capping
new_fifa$log_market_value_to_wage_capped <- pmin(pmax(new_fifa$log_market_value_to_wage, lower_bound), upper_bound)
ggplot(new_fifa, aes(y = log_market_value_to_wage_capped)) + geom_boxplot() +
labs(title = "log_market_value_to_wage_capped", y = "llog_market_value_to_wage_capped")
#11.
#12. pace_dribbling
ggplot(new_fifa, aes(y = pace_dribbling)) + geom_boxplot() +
labs(title = "pace_dribbling", y = "pace_dribbling")
ggplot(new_fifa, aes(x = pace_dribbling)) + geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "histogram of pace_dribbling", x = "pace_dribbling", y = "frequency")
new_fifa$sqrt_pace_dribbling <- sqrt(new_fifa$pace_dribbling)
ggplot(new_fifa, aes(x = sqrt_pace_dribbling)) +
geom_histogram(binwidth = 0.01, fill = 'blue', color = 'black') +
labs(title = 'histogram of sqrt_pace_dribbling', x = 'sqrt_pace_dribbling', y = 'frequency')
ggplot(new_fifa, aes(y = sqrt_pace_dribbling)) + geom_boxplot() +
labs(title = "boxplot of sqrt_pace_dribbling", y = "sqrt_pace_dribbling")
lower_threshold <- quantile(new_fifa$sqrt_pace_dribbling, 0.01)
new_fifa$sqrt_pace_dribbling[new_fifa$sqrt_pace_dribbling < lower_threshold] <- lower_threshold
ggplot(new_fifa, aes(y = sqrt_pace_dribbling)) + geom_boxplot() +
labs(title = "boxplot of sqrt_pace_dribbling", y = "sqrt_pace_dribbling")
#13. defending_physic
ggplot(new_fifa, aes(y = defending_physic)) + geom_boxplot() +
labs(title = "defending_physic", y = "defending_physic")
ggplot(new_fifa, aes(x = defending_physic)) + geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "histogram of defending_physic", x = "defending_physic", y = "frequency")
dataset<-new_fifa %>% dplyr::select(wage_eur, potential, preferred_foot_right, weak_foot, age, defending_physic, work_rate_attack, work_rate_defense, work_rate_defense, height_cm_capped, weight_kg_capped, pace_dribbling)
ntree_values = c(50, 75, 100, 125, 150, 200)
library(randomForest)
ntree_values = c(50, 75, 100, 125, 150, 200)
correlation_values = c()
for (ntree in ntree_values){
rf = randomForest(wage_eur ~ ., data=data.train, ntree=ntree, mtry=3, importance=TRUE)
pred <- predict(rf,data.test[,-1])
correlation_values = c(correlation_values, cor(data.test[,1],pred))
}
plot(ntree_values, correlation_values, type="l", xlab="ntree", ylab="correlation")
# best value
print(correlation_values[2])
# best value
print(correlation_values[4])
varImpPlot(rf)
